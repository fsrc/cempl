// Generated by CoffeeScript 1.9.0
(function() {
  var elements, ensureArguments, markup, unwrapFunctionToString, _,
    __slice = [].slice;

  _ = require('lodash');

  elements = require('./elements');

  unwrapFunctionToString = function(fn) {
    var code, lines;
    code = fn.toString();
    lines = code.split('\n');
    lines = _.initial(_.tail(lines));
    lines = _.map(lines, function(line) {
      return _.trim(line);
    });
    return lines.join("");
  };

  ensureArguments = function(tag, attr, content) {
    var f, text;
    f = null;
    text = null;
    if (!_.isString(tag)) {
      throw "Tag must be a string";
    }
    if (_.isPlainObject(attr)) {
      attr = attr;
    } else if ((_.isString(attr) || _.isFunction(attr)) && _.isUndefined(content)) {
      content = attr;
      attr = null;
    }
    if (_.isFunction(content)) {
      f = content;
    } else if (_.isString(content)) {
      text = content;
    }
    return [tag, attr, f, text];
  };

  markup = function(intag, inattr, incontent) {
    var attr, f, tag, text, _ref;
    _ref = ensureArguments(intag, inattr, incontent), tag = _ref[0], attr = _ref[1], f = _ref[2], text = _ref[3];
    return (function(tag, attr, f) {
      var all, children, tagfn, wrapper;
      children = [];
      tagfn = function(t, a, f) {
        children.push(markup(t, a, f));
        return wrapper;
      };
      all = _.reduce(elements, function(obj, name) {
        obj[name] = _.bind(tagfn, null, name);
        return obj;
      }, {});
      wrapper = {
        apply: function() {
          var args, f;
          f = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          return _.bind.apply(_, [f, wrapper].concat(__slice.call(args)))();
        },
        tag: tagfn,
        text: function(text) {
          return children.push({
            "eval": function() {
              return text;
            }
          });
        },
        script: function(ref) {
          if (_.isPlainObject(ref)) {
            return children.push({
              "eval": function() {
                var attribs;
                attribs = "";
                attribs = " " + _.map(attr, function(v, k) {
                  return k + "='" + v + "'";
                }).join(' ');
                return "<script" + attribs + "></script>";
              }
            });
          } else if (_.isFunction(ref)) {
            return children.push({
              "eval": function() {
                return "<script>" + (unwrapFunctionToString(ref)) + "</script>";
              }
            });
          }
        },
        "eval": function() {
          var attribs, inner;
          if (text != null) {
            inner = text;
          } else {
            inner = _.map(children, function(child) {
              return child["eval"]();
            }).join("");
          }
          attribs = "";
          if (attr != null) {
            attribs = " " + _.map(attr, function(v, k) {
              return k + "='" + v + "'";
            }).join(' ');
          }
          if (tag != null) {
            return "<" + tag + attribs + ">" + inner + "</" + tag + ">";
          } else {
            return inner;
          }
        }
      };
      wrapper = _.assign(wrapper, all);
      if (f != null) {
        _.bind(f, wrapper)();
      }
      return wrapper;
    })(tag, attr, f);
  };

  module.exports = function(f) {
    return markup('html', f);
  };

}).call(this);
